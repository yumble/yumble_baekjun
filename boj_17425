max = 1000001
dp = [1]*(max+1)
s = [0]*(max+1)

for i in range(2,max+1):
    j=1
    while i*j <= max:
        dp[i*j] += i
        j += 1
for i in range(1,max+1):
    s[i] = s[i-1] + dp[i]

num = int(input())
ans=[]
for _ in range(num):
    n = int(input())
    ans.append(s[n])

print('\n'.join(map(str, ans)))


# 각각의 약수들을 다 구하면 o(n) * n개
# 루트n 만 나눠도 된다고 하더라도 O(n*루트n)
# 따라서 배수로 구하기
# dynamic programming 도 이용해야하는 문제
# 테스트케이스가 100,000 개 n=1,000,000 까지 가능해서 
# 기존 문제대로 풀면 1,000,000 * 100,000 = 100,000,000,000 1초가 넘어간다.
# 따라서 1부터 1,000,000 까지 각각의 약수들을 뭘 가지고 있는지 배열을 통해 저장
# 그리고 또 다른 s 배열을 만들어 이전의 약수합까지 같이 더하는 다이나믹 프로그래밍을 이용
# 추가적으로 print문을 여러번 쓰면 시간 초과가 나서 list로 받은 후 한 번에 출력해야함.
# 굉장히 까탈스러운 문제...
